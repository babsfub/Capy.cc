Blast Testnet (Sepolia)
Network Name: Blast Sepolia
RPC Endpoint: https://sepolia.blast.io
Chain ID: 168587773
Currency Symbol: ETH
Block Explorer: https://testnet.blastscan.io
Receive and claim gas fees
​
Overview
Existing L2s like Optimism and Arbitrum keep sequencer fees for themselves. Blast redirects sequencer fees to the dapps that induced them, allowing smart contract developers to have an additional source of revenue.

Contracts have two options for their Gas Mode:

Void (DEFAULT): base + priority fees go to the sequencer operator
Claimable: base + priority fees spent on this contract can be claimed by the contract, net of L1 fees
Smart contracts must interact with the Blast contract located at 0x4300000000000000000000000000000000000002 to change their Gas Mode.

​
Setting Gas Mode to Claimable
When the Gas Mode is set to Claimable, the net L2 gas fees incurred by the smart contract can be claimed asynchronously.

Nested contract calls distribute the incurred fees to the contracts that incurred the gas; not to the top-level contract.


interface IBlast{
    // See IBlast interface source code below
}

contract MyContract {
	constructor() {
		IBlast(0x43...02).configureClaimableGas()
	}

	function claimAllGas(address recipient) external {
	    // This function is public meaning anyone can claim the gas
		IBlast(0x43...02).claimAllGas(address(0), recipient);
  }
}
​
Claiming Gas
Contracts pay a variable tax rate to the sequencer operator when they claim their accumulated gas.

This tax rate starts at 95% and decreases to 0% over time as the accumulated gas vests in the gas manager

To claim all gas, regardless of tax, call claimAllGas() (see example above)
To only claim fully vested gas (i.e. at a 0% tax rate), call claimMaxGas()
To claim all possible gas at some max tax rate, call claimGasAtMinClaimRate()
To claim with more specific parameters, call claimGas()
See the claim gas functions in the IBlast interface below for specific function parameters.

​
Governor
The governor is the address that’s allowed to claim the contract’s yield and gas, which might be the contract’s own address, its owner, or anything else.

By default, the governor is the contract’s own address.

After contract creation, only the governor can reconfigure the contract’s rebasing/gas mode.


interface IBlast{
    // See IBlast interface source code below
}

contract MyContract {
	constructor(address gov) {
		IBlast(0x43...02).configureClaimableGas() 
		IBlast(0x43...02).configureGovernor(gov) //only this address can claim yield
	}
}
​
IBlast Interface

enum YieldMode {
    AUTOMATIC,
    VOID,
    CLAIMABLE
}

enum GasMode {
    VOID,
    CLAIMABLE 
}

interface IBlast{
    // configure
    function configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;
    function configure(YieldMode _yield, GasMode gasMode, address governor) external;

    // base configuration options
    function configureClaimableYield() external;
    function configureClaimableYieldOnBehalf(address contractAddress) external;
    function configureAutomaticYield() external;
    function configureAutomaticYieldOnBehalf(address contractAddress) external;
    function configureVoidYield() external;
    function configureVoidYieldOnBehalf(address contractAddress) external;
    function configureClaimableGas() external;
    function configureClaimableGasOnBehalf(address contractAddress) external;
    function configureVoidGas() external;
    function configureVoidGasOnBehalf(address contractAddress) external;
    function configureGovernor(address _governor) external;
    function configureGovernorOnBehalf(address _newGovernor, address contractAddress) external;

    // claim yield
    function claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);
    function claimAllYield(address contractAddress, address recipientOfYield) external returns (uint256);

    // claim gas
    function claimAllGas(address contractAddress, address recipientOfGas) external returns (uint256);
    function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) external returns (uint256);
    function claimMaxGas(address contractAddress, address recipientOfGas) external returns (uint256);
    function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) external returns (uint256);

    // read functions
    function readClaimableYield(address contractAddress) external view returns (uint256);
    function readYieldConfiguration(address contractAddress) external view returns (uint8);
    function readGasParams(address contractAddress) external view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode);
}