Blast Logo
AIRDROP
LEADERBOARD
DEVS
ABOUT

The Blast Testnet is now live and the Big Bang Competition for dApps is open for registration.

Build with yield
Blast is an L2 with native yield for ETH and stablecoins. Yield makes it possible to create new revenue streams and provide novel rewards for end-users.

An evm-compatible L2 designed to help you and your users earn more.

NATIVE YIELD
Yield as a primitive unlocks new business models for Dapps. ETH and stablecoins bridged to Blast automatically earn yield. Dapps can easily monetize deposits with a single config.


GAS FEE REVENUE
Other L2s keep revenue from gas fees for themselves. Blast gives this revenue back to developers programatically. Keep this revenue for yourself or use it to subsidize gas fees for your users.


AIRDROP
50% of the Blast Airdrop has been reserved for developers. The Developer Airdrop launches in January along with the Blast Testnet.

If you've deployed on mainnet or any L2, you can easily deploy on Blast.
Blast is EVM equivalent, so you can build Dapps on Blast without learning a new toolkit. All your code, tools, and infrastructure work out of the box.

Automatic Yield
Claimable Yield
Earn Gas Fee Revenue

contract ContractWithAutomaticYield {
    Blast constant blast = Blast(0x4300000000000000000000000000000000000000);

    constructor() {
        // The contract's EVM balance will increase automatically.
        blast.configureContract(Yield.AUTOMATIC, address(0));
    }
}

contract ContractWithClaimableYield {
    Blast constant blast = Blast(0x4300000000000000000000000000000000000000);
    address constant admin = 0x0f0f0F0f0f0F0F0f0F0F0F0F0F0F0f0f0F0F0F0F;

    constructor() {
        // The contract's EVM balance will not automatically increase.
        // Yield will accrue and can be claimed via the claimYield function.
        blast.configureContract(Yield.CLAIMABLE, address(0));
    }

    function claimYield(address recipient) external {
        require(msg.sender == admin);
        blast.claimYield(recipient);
    }
}

contract ContractEarnsGasFeeRevnue {
    Blast constant blast = Blast(0x4300000000000000000000000000000000000000);

    constructor() {
        address sequencerFeeRecipient = 0x0f0f0F0f0f0F0F0f0F0F0F0F0F0F0f0f0F0F0F0F;
        blast.configureContract(Yield.AUTOMATIC, sequencerFeeRecipient);
    }
}
Compatible with
Compatible with HardhatCompatible with Foundry
It's time to ditch other L2s
Blast has the same features you love on other L2s while providing 10x more value.

Blast comparison with other L2's
alt_illustration-liquidity
$1B LIQUIDITY WAITING FOR YOU
103,124 users have deposited $1B to Blast in anticipation of the mainnet launch in February. When the Blast mainnet launches, the bridge contract will unlock and release all those users and funds to your dapps.

alt_illustration-airdrop
BLAST DEVELOPER AIRDROP
The Blast Developer Airdrop goes live in January, when the Blast Testnet launches. 50% of the Blast airdrop has been allocated for developers. Instructions on how to claim the airdrop and how it works will be shared upon testnet launch.

Early Access Airdrop timeline
alt_illustration-community
JOIN THE COMMUNITY
In the meantime, join our developer community on Discord to learn more about Blast (also so you don't miss the airdrop).

JOIN BLAST DISCORD
Need More Info?
More docs will be available when the Blast Developer Airdrop and Testnet launches in January. In the meantime, join our Discord to learn more.

JOIN BLAST DISCORD

TVL / $1,359,827,487
TOTAL USERS / 103,124



